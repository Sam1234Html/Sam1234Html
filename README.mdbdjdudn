import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'My Simple Flutter App', // Title for the app in the task switcher
      theme: ThemeData(
        primarySwatch: Colors.blue, // Defines the primary color swatch for the app
        visualDensity: VisualDensity.adaptivePlatformDensity,
        // Ensures the app looks good on different platforms
      ),
      home: const MyHomePage(), // Sets the home screen of the app
    );
  }
}

class MyHomePage extends StatelessWidget {
  const MyHomePage({super.key});

  // A method to be executed when the ElevatedButton is pressed
  void _onButtonPressed() {
    // This message will appear in the console (e.g., VS Code's Debug Console, or terminal where 'flutter run' is active)
    print('ElevatedButton clicked! A message from the console!');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      // 1. Title bar with the name of the app
      appBar: AppBar(
        title: const Text(
          'My Awesome App', // Text displayed in the app bar
          style: TextStyle(color: Colors.white), // Ensures text is visible on blue background
        ),
        backgroundColor: Colors.blue, // Sets the background color of the AppBar
        centerTitle: true, // Centers the title text in the AppBar
      ),
      body: Center(
        // 2. A centered column
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center, // Aligns children to the center vertically
          crossAxisAlignment: CrossAxisAlignment.center, // Aligns children to the center horizontally
          children: <Widget>[
            // 2.1. A Text widget displaying a welcome message
            const Text(
              'Welcome to My Simple Flutter App!',
              textAlign: TextAlign.center, // Centers the text itself if it wraps
              style: TextStyle(
                fontSize: 24, // Larger font size for the welcome message
                fontWeight: FontWeight.bold, // Bold text
                color: Colors.deepPurple, // Custom text color
              ),
            ),
            const SizedBox(height: 30), // Provides vertical spacing after the Text widget

            // 2.2. An ElevatedButton widget
            ElevatedButton(
              onPressed: _onButtonPressed, // Calls _onButtonPressed when the button is clicked
              style: ElevatedButton.styleFrom(
                foregroundColor: Colors.white, // Color of the button's text/icon
                backgroundColor: Colors.green, // Background color of the button
                padding: const EdgeInsets.symmetric(horizontal: 30, vertical: 15), // Internal padding
                textStyle: const TextStyle(fontSize: 18), // Text style for the button's label
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(10), // Adds rounded corners to the button
                ),
              ),
              child: const Text('Click Me!'), // The text displayed on the button
            ),
            const SizedBox(height: 30), // Provides vertical spacing after the ElevatedButton

            // 2.3. An Image widget that loads and displays an image from the internet
            // Using a random image from a public placeholder service (Lorem Picsum)
            Image.network(
              'https://picsum.photos/250/250?random=1', // URL of the image to load
              width: 250, // Sets the width of the image
              height: 250, // Sets the height of the image
              fit: BoxFit.cover, // How the image should be inscribed into the box
              // Optional: loadingBuilder to show a progress indicator while loading
              loadingBuilder: (BuildContext context, Widget child, ImageChunkEvent? loadingProgress) {
                if (loadingProgress == null) return child; // Image is fully loaded
                return Center(
                  child: CircularProgressIndicator(
                    value: loadingProgress.expectedTotalBytes != null
                        ? loadingProgress.cumulativeBytesLoaded / loadingProgress.expectedTotalBytes!
                        : null,
                  ),
                );
              },
              // Optional: errorBuilder to show an error message if image fails to load
              errorBuilder: (BuildContext context, Object exception, StackTrace? stackTrace) {
                return const Text(
                  'Could not load image. Check internet connection.',
                  textAlign: TextAlign.center,
                  style: TextStyle(color: Colors.red),
                );
              },
            ),
            const SizedBox(height: 20), // Spacing below the Image widget
            const Text(
              'A random image from the internet!',
              style: TextStyle(fontSize: 16, fontStyle: FontStyle.italic),
            ),
          ],
        ),
      ),
    );
  }
}
