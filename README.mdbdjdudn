import operator

# 1. Design the Chatbotâ€™s Personality
BOT_NAME = "CryptoSage"
BOT_TONE = "Friendly, professional, and insightful. I'm here to help you navigate the crypto world!"

# 2. Predefined Crypto Data
crypto_db = {
    "Bitcoin": {
        "price_trend": "rising",
        "market_cap": "high",
        "energy_use": "high",
        "sustainability_score": 3/10
    },
    "Ethereum": {
        "price_trend": "stable",
        "market_cap": "high",
        "energy_use": "medium",
        "sustainability_score": 6/10
    },
    "Cardano": {
        "price_trend": "rising",
        "market_cap": "medium",
        "energy_use": "low",
        "sustainability_score": 8/10
    },
    "Solana": {
        "price_trend": "rising",
        "market_cap": "high",
        "energy_use": "medium",
        "sustainability_score": 5/10
    },
    "Polkadot": {
        "price_trend": "stable",
        "market_cap": "medium",
        "energy_use": "low",
        "sustainability_score": 7/10
    }
}

# Add a disclaimer
DISCLAIMER = "Disclaimer: Cryptocurrency investments are highly volatile and risky. Always do your own thorough research before investing. This chatbot provides general information and not financial advice."

def get_bot_response(user_query):
    """
    Processes user queries and provides cryptocurrency advice based on predefined rules.
    """
    user_query = user_query.lower()

    if "hello" in user_query or "hi" in user_query:
        return f"Hello there! I'm {BOT_NAME}. {BOT_TONE} How can I assist you with crypto insights today?"
    elif "trending up" in user_query or "rising price" in user_query or "profit" in user_query or "growth" in user_query:
        profitable_coins = []
        for coin, data in crypto_db.items():
            if data["price_trend"] == "rising" and data["market_cap"] == "high":
                profitable_coins.append(coin)
        if profitable_coins:
            return f"For potential profitability, consider these cryptocurrencies that are currently trending up with a high market cap: {', '.join(profitable_coins)}. ðŸš€"
        else:
            return "Currently, I don't see any cryptocurrencies perfectly matching the criteria for high profitability based on rising trend and high market cap in my database. Perhaps consider other factors or market research."
    elif "sustainable" in user_query or "eco-friendly" in user_query or "green" in user_query:
        sustainable_coins = []
        for coin, data in crypto_db.items():
            if data["energy_use"] == "low" and data["sustainability_score"] > 7/10:
                sustainable_coins.append(coin)
        if sustainable_coins:
            return f"Looking for sustainability? These coins are known for their eco-friendliness and high sustainability scores: {', '.join(sustainable_coins)}. ðŸŒ± They have long-term potential!"
        else:
            # Find the most sustainable if no perfect match
            most_sustainable = max(crypto_db, key=lambda x: crypto_db[x]["sustainability_score"])
            return f"Based on my data, {most_sustainable} has the highest sustainability score. While I don't see coins perfectly matching 'low energy use' and 'sustainability score > 7/10' from your query, it's a great option for eco-conscious investing. ðŸŒ±"
    elif "advice" in user_query or "recommend" in user_query:
        # Prioritize profitable and sustainable
        best_recommendation = None
        best_score = -1

        for coin, data in crypto_db.items():
            score = 0
            if data["price_trend"] == "rising":
                score += 2
            if data["market_cap"] == "high":
                score += 1
            if data["energy_use"] == "low":
                score += 1
            score += data["sustainability_score"] * 5  # Scale sustainability score to have more impact

            if score > best_score:
                best_score = score
                best_recommendation = coin
            elif score == best_score: # If scores are equal, prefer higher sustainability
                if crypto_db[coin]["sustainability_score"] > crypto_db[best_recommendation]["sustainability_score"]:
                    best_recommendation = coin

        if best_recommendation:
            return f"Considering both profitability and sustainability, I recommend looking into {best_recommendation}. It shows a good balance of growth potential and eco-friendliness. ðŸ“ˆðŸ’š"
        else:
            return "I'm still processing the best recommendation for you. Could you be more specific about what you're looking for?"

    elif "disclaimer" in user_query:
        return DISCLAIMER
    elif "exit" in user_query or "bye" in user_query:
        return "Goodbye! Remember to always do your own research before making any investment decisions. Happy investing! ðŸ‘‹"
    else:
        return "I'm not sure how to respond to that. I can provide insights on trending cryptocurrencies, sustainable options, or general investment advice. Feel free to ask about 'profit', 'sustainability', or 'recommendations'."

# --- Chatbot Interaction Loop ---
print(f"Welcome! I'm {BOT_NAME}, your AI-powered financial sidekick! {BOT_TONE}\n")
print("Type 'exit' or 'bye' to end our conversation.")
print(DISCLAIMER)

while True:
    user_input = input("\nYou: ")
    if user_input.lower() in ["exit", "bye"]:
        print(f"{BOT_NAME}: Goodbye! Remember to always do your own research before making any investment decisions. Happy investing! ðŸ‘‹")
        break
    
    response = get_bot_response(user_input)
    print(f"{BOT_NAME}: {response}")

