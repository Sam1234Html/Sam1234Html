// src/App.jsx
// This file encapsulates the entire React application for the assignment,
// adhering to the "write only one file of code" requirement.
//
// Assumptions:
// - Vite and Tailwind CSS are already configured in your project.
// - `npm install` and `npm run dev` (or `yarn`) commands are functional.
// - `uuid` package is installed (`npm install uuid` or `yarn add uuid`) for unique keys (optional, but good practice).

import React, { useState, useEffect } from 'react';
import { v4 as uuidv4 } from 'uuid'; // Used for generating unique keys if needed, not strictly for product ID here.

// --- 1. Reusable UI Component: ProductCard ---
// This component displays details for a single product.
// It leverages Tailwind CSS for styling and responsiveness.
// In a typical project, this would be in `src/components/ProductCard.jsx`.
const ProductCard = ({ product }) => {
  // Mock price and image for demo purposes, as JSONPlaceholder doesn't provide them.
  const price = (Math.random() * (250 - 20) + 20).toFixed(2); // Random price between 20 and 250
  const imageUrl = `https://via.placeholder.com/150/CCCCCC/808080?text=Product+${product.id}`; // Simple placeholder image

  return (
    <div className="bg-white rounded-xl shadow-lg hover:shadow-xl transition-all duration-300 ease-in-out
                    p-6 m-4 max-w-sm w-full sm:w-[calc(50%-2rem)] lg:w-[calc(33%-2rem)] xl:w-[calc(25%-2rem)]
                    flex flex-col border border-gray-200">
      <img
        src={imageUrl}
        alt={product.title}
        className="w-full h-40 object-cover rounded-md mb-4 shadow-sm"
      />
      <h3 className="text-xl font-semibold text-gray-800 mb-2 h-14 overflow-hidden" title={product.title}>
        {product.title}
      </h3>
      <p className="text-gray-600 text-sm mb-4 line-clamp-3 h-16">
        {product.body} {/* Using post body as product description */}
      </p>
      <div className="flex justify-between items-center mt-auto pt-4 border-t border-gray-100">
        <span className="text-2xl font-bold text-indigo-700">${price}</span>
        <button className="bg-indigo-600 hover:bg-indigo-700 text-white font-medium py-2 px-5 rounded-lg
                           shadow-md hover:shadow-lg transition duration-200 ease-in-out
                           focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-75">
          Add to Cart
        </button>
      </div>
    </div>
  );
};

// --- 2. API Integration Function ---
// This function handles fetching data from an external API.
// It uses JSONPlaceholder as a simple, free public API for demonstration.
// (https://jsonplaceholder.typicode.com/posts)
// In a typical project, this would be in `src/api/productsApi.js`.
const fetchProducts = async () => {
  try {
    // Fetching 12 posts and using them as 'products'
    const response = await fetch('https://jsonplaceholder.typicode.com/posts?_limit=12');
    if (!response.ok) {
      // Handle HTTP errors (e.g., 404, 500)
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    const data = await response.json();
    return data;
  } catch (error) {
    console.error("Error fetching products:", error);
    // Re-throw the error to be caught by the component's state management
    throw error;
  }
};

// --- 3. Main Application Component: App ---
// This component manages the application's state, integrates with the API,
// and renders the main UI using other components and Tailwind CSS.
// This would be your `src/App.jsx` file.
function App() {
  // State management using React Hooks
  const [products, setProducts] = useState([]); // Stores the fetched product data
  const [loading, setLoading] = useState(true); // Manages the loading state
  const [error, setError] = useState(null);     // Stores any error messages

  // useEffect hook for API integration: fetches data when the component mounts.
  useEffect(() => {
    const getProducts = async () => {
      try {
        const data = await fetchProducts();
        setProducts(data); // Update state with fetched data
      } catch (err) {
        setError("Failed to load products. Please check your network and try again.");
      } finally {
        setLoading(false); // Set loading to false regardless of success or failure
      }
    };

    getProducts(); // Call the async function
  }, []); // Empty dependency array ensures this effect runs only once after the initial render

  // Conditional Rendering based on application state (loading, error, data presence)
  if (loading) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gray-50 text-gray-700">
        <div className="animate-spin rounded-full h-16 w-16 border-t-4 border-b-4 border-indigo-600"></div>
        <p className="mt-4 text-xl font-medium">Loading products...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-red-50 text-red-800 p-8">
        <h2 className="text-3xl font-bold mb-4">Oops! Something went wrong.</h2>
        <p className="text-lg text-center">{error}</p>
        <button
          onClick={() => {
            // Simple retry mechanism: reset state and re-fetch
            setLoading(true);
            setError(null);
            setProducts([]); // Clear previous products
            // Re-run the effect by triggering a state update that affects its dependencies if needed,
            // or by directly calling getProducts() again. For this simple setup,
            // a full page reload might be implied or the effect could be re-triggered.
            // For a soft re-fetch, you'd put getProducts into a useCallback and add it as a dependency.
            window.location.reload(); // Simple retry for demo
          }}
          className="mt-6 bg-red-600 hover:bg-red-700 text-white font-semibold py-3 px-6 rounded-lg
                     shadow-md hover:shadow-lg transition duration-200 ease-in-out
                     focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-opacity-75"
        >
          Try Again
        </button>
      </div>
    );
  }

  // Main application structure with Tailwind CSS for layout and responsiveness
  return (
    <div className="min-h-screen bg-gradient-to-br from-gray-50 to-indigo-100 font-sans text-gray-900">
      {/* Header Section */}
      <header className="bg-indigo-700 text-white p-6 shadow-xl sticky top-0 z-10">
        <div className="container mx-auto flex flex-col sm:flex-row justify-between items-center">
          <h1 className="text-3xl font-extrabold tracking-tight mb-2 sm:mb-0">
            <a href="#" className="hover:text-indigo-200 transition-colors duration-200">
              Product Catalog
            </a>
          </h1>
          <nav>
            <ul className="flex space-x-6 text-lg">
              <li><a href="#" className="hover:text-indigo-200 transition-colors duration-200">Home</a></li>
              <li><a href="#" className="hover:text-indigo-200 transition-colors duration-200">Products</a></li>
              <li><a href="#" className="hover:text-indigo-200 transition-colors duration-200">About</a></li>
              <li><a href="#" className="hover:text-indigo-200 transition-colors duration-200">Contact</a></li>
            </ul>
          </nav>
        </div>
      </header>

      {/* Main Content Area */}
      <main className="container mx-auto p-6 md:p-8">
        <section className="text-center mb-12 py-8 bg-white rounded-lg shadow-md">
          <h2 className="text-5xl font-extrabold text-indigo-800 mb-4 leading-tight">
            Discover Our Amazing Collection
          </h2>
          <p className="text-xl text-gray-700 max-w-2xl mx-auto">
            Explore a curated selection of products designed to enhance your life.
            From electronics to home essentials, we have something for everyone.
          </p>
        </section>

        <section>
          {products.length === 0 ? (
            <div className="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded-md" role="alert">
              <p className="font-bold">No Products Found!</p>
              <p>It seems there are no items to display right now. Please check back later.</p>
            </div>
          ) : (
            <div className="flex flex-wrap justify-center -m-4"> {/* Negative margin to counteract card margins */}
              {products.map(product => (
                // Use product.id from the fetched data as a unique key
                <ProductCard key={product.id} product={product} />
              ))}
            </div>
          )}
        </section>
      </main>

      {/* Footer Section */}
      <footer className="bg-gray-800 text-white py-8 px-6 mt-12">
        <div className="container mx-auto text-center text-sm">
          <p>&copy; {new Date().getFullYear()} Product Catalog. All rights reserved.</p>
          <p className="mt-2">
            Designed with <span className="text-red-500">❤️</span> using React & Tailwind CSS.
          </p>
          <div className="mt-4 flex justify-center space-x-4">
            <a href="#" className="hover:text-indigo-300 transition-colors duration-200">Privacy Policy</a>
            <span className="text-gray-600">|</span>
            <a href="#" className="hover:text-indigo-300 transition-colors duration-200">Terms of Service</a>
          </div>
        </div>
      </footer>
    </div>
  );
}

export default App;

