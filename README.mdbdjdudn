# -*- coding: utf-8 -*-
"""
AI Tools Assignment - Bonus Task: Deploy Your Model
Tool: Streamlit
Goal: Create a web interface for the MNIST classifier.
"""

import streamlit as st
import tensorflow as tf
import numpy as np
from PIL import Image # Pillow library for image processing

print("--- Bonus Task: Deploy Your MNIST Classifier with Streamlit ---")

# --- 1. Load the pre-trained MNIST CNN model ---
# Ensure you have saved your model from Part 2, Task 2 (e.g., as 'mnist_cnn_model.h5')
# If you saved it in the newer SavedModel format, just use the directory name.
try:
    # Attempt to load the model. Replace 'mnist_cnn_model.h5' with your saved model's path/name
    model = tf.keras.models.load_model('mnist_cnn_model.h5')
    st.success("MNIST CNN Model loaded successfully!")
    print("Model loaded.")
except Exception as e:
    st.error(f"Error loading model: {e}")
    st.info("Please ensure 'mnist_cnn_model.h5' is in the same directory and saved correctly after Task 2.")
    st.stop() # Stop the app if model loading fails

# --- 2. Streamlit UI Setup ---
st.set_page_config(
    page_title="MNIST Digit Classifier",
    page_icon="✍️",
    layout="centered",
    initial_sidebar_state="expanded"
)

st.title("✍️ MNIST Handwritten Digit Classifier")
st.markdown("Upload an image of a handwritten digit (0-9) and let the AI predict it!")

st.sidebar.header("About This App")
st.sidebar.info(
    "This app demonstrates the deployment of a Convolutional Neural Network (CNN) "
    "trained on the MNIST dataset using TensorFlow. "
    "Upload a square image (preferably 28x28 grayscale) containing a single digit."
)
st.sidebar.markdown("[GitHub Repo (coming soon!)](#)") # Placeholder for GitHub link

# --- 3. Image Upload Section ---
uploaded_file = st.file_uploader("Choose an image...", type=["png", "jpg", "jpeg"])

if uploaded_file is not None:
    # Display the uploaded image
    image = Image.open(uploaded_file).convert("L") # Convert to grayscale
    st.image(image, caption="Uploaded Image", use_column_width=True, width=150)
    st.write("")
    st.write("Classifying...")

    # --- 4. Preprocess the image for the model ---
    try:
        # Resize image to 28x28 pixels
        image = image.resize((28, 28))
        # Convert image to numpy array
        img_array = np.array(image)
        # Normalize pixel values to 0-1 range
        img_array = img_array / 255.0
        # Reshape to (1, 28, 28, 1) to match model input shape (batch_size, height, width, channels)
        img_array = img_array.reshape(1, 28, 28, 1)

        st.success("Image preprocessed successfully!")
        # Optional: show preprocessed image for debugging
        # st.image(img_array.reshape(28,28), caption="Preprocessed (28x28 grayscale)", width=100)

        # --- 5. Make a prediction ---
        predictions = model.predict(img_array)
        predicted_class = np.argmax(predictions)
        confidence = np.max(predictions) * 100 # Convert to percentage

        st.subheader("Prediction:")
        st.write(f"The model predicts this is a: **{predicted_class}**")
        st.write(f"Confidence: **{confidence:.2f}%**")

        # Display probabilities for all classes
        st.markdown("---")
        st.subheader("All Class Probabilities:")
        prob_df = pd.DataFrame({
            'Digit': range(10),
            'Probability': [f"{p*100:.2f}%" for p in predictions[0]]
        })
        # Sort by probability for better readability
        prob_df = prob_df.sort_values(by='Probability', ascending=False)
        st.dataframe(prob_df, hide_index=True)


    except Exception as e:
        st.error(f"Error during image processing or prediction: {e}")
        st.info("Please ensure the uploaded image is suitable for a digit classifier.")

st.markdown("---")
st.caption("Developed as part of the AI Tools Assignment: Mastering the AI Toolkit.")

